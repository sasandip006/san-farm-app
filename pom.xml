<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.3</version>
        <relativePath /> <!-- lookup parent from repository -->
    </parent>
    <groupId>san.farm.live</groupId>
    <artifactId>san-farm-app</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>san-farm-app</name>
    <description>Live Farming Application project for Spring Boot</description>
    <properties>
        <java.version>17</java.version>
         <kafka.version>3.5.1</kafka.version>
        <start-class>com.example.demo.SanFarmAppApplication</start-class>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb</artifactId>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>org.springframework.boot</groupId>-->
<!--            <artifactId>spring-boot-starter-data-elasticsearch</artifactId>-->
<!--        </dependency>-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>3.1.0</version>
        </dependency>
        <!--dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-streams</artifactId>
        </dependency-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>com.example.demo.SanFarmAppApplication</mainClass>
                    <layout>JAR</layout>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.40.1</version>
                <configuration>
                    <dockerHost>http://host.docker.internal:2375/</dockerHost>
                    <!--for running on jenkins-->
                    <!--                    					<dockerHost>tcp://localhost:2375</dockerHost>-->
                    <!--for running local-->
                    <!--					<dockerHost>tcp://172.28.32.1:2375</dockerHost>-->
<!--                    <dockerHost>tcp://172.18.173.145:2376</dockerHost>-->
<!--                    <certPath>C:/Users/HP/.minishift/certs</certPath> -->
                      <useColor>true</useColor>
                    <images>
                        <image>
                            <name>sasandip006/${project.name}</name>
                            <build>
                                <from>openjdk:17</from>
                                <assembly>
                                    <name>build</name>
                                    <descriptorRef>artifact</descriptorRef>
                                </assembly>
                                <!--                                <ports>-->
                                <!--                                    <port>8090</port>-->
                                <!--                                </ports>-->
                                <cmd>java -jar build/${project.name}-${project.version}.jar</cmd>
                                <maintainer>sasandip006@gmail.com</maintainer>
                            </build>
                            <run>
                                <ports>
                                    <port>localhost:7085:8070</port> <!--second container/ app port  value can be 8085:8070-->
                                </ports>
                                <volumes>
                                    <bind>
                                        <volume>/sandeep/logs</volume>
                                    </bind>
                                </volumes>
                                <wait>
                                    <http>
                                        <!--                                        <url>http://127.0.0.1:7085/v1/farm?name=sandeep</url>   -->
                                        <!--for running local-->
                                        <url>http://host.docker.internal:7085/v1/farm?name=sandeep</url>
                                        <!--for running on jenkins-->
                                        <method>GET</method>
                                        <status>200..299</status>
                                    </http>
                                    <log>This is the log Printed by the Sandeep Andhale to the Docker container</log>
                                    <time>1000000</time>
                                    <kill>2000</kill>
                                    <shutdown>100</shutdown>
                                </wait>
                                <links></links>
                            </run>
                        </image>
                    </images>
                </configuration>
                <executions>
                    <execution>
                        <id>build-image</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>stop</goal>
                            <goal>remove</goal>
                            <goal>help</goal>
                            <goal>build</goal>
                            <goal>start</goal>
                            <!--                            <goal>push</goal>-->
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
